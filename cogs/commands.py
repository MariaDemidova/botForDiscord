import disnake
from disnake.ext import commands
import aiosqlite
import discard
from DiscordLevelingCard import Settings
from configparser import ConfigParser

config  = ConfigParser()
config.read('config.ini',  encoding= 'utf-8')

class UserCommands(commands.Cog):
    def __init__(self, bot) -> None:
        self.bot: commands.Bot = bot
        self.card_settings = Settings(
            background="bg4.jpg",
            text_color="black",
            bar_color="#FFFFFF"
        )
        self.lvl_ranks = config['RANKS']
        self.exp_stop_list = self.bot.parse_int_tuple(config['SETTINGS']['BOTS_LIST'])
        self.admin_roles_list = self.bot.parse_int_tuple(config['SETTINGS']['ADMIN_ROLE_IDS'])
        
    @commands.command(aliases = ['—Ä–∞–Ω–∫','–∫—Ç–æ—è','—Ä–∞–Ω–≥'])
    async def rank(self, ctx, member: disnake.Member = None):
        db = await aiosqlite.connect('users.db')
        print('rank')
        print(aiosqlite.__version__)
        if member is None:
            user_id = ctx.author.id
            user_name = ctx.author
        else:
            user_id = member.id
            user_name = member
        users = await db.execute_fetchall('SELECT * FROM users ORDER BY lvl DESC, exp DESC')
        await db.close()
        i=0
        for user in users:
            i += 1
            if user_id == user[1]:
                exp = user[2]
                lvl = user[3]
                voice_time = user[4]
                rank = i
        a = discard.dis_card(
            settings=self.card_settings,
            avatar=user_name.display_avatar.url.split('?')[0],
            level=lvl,
            level_name=self.lvl_ranks[str(lvl)],
            current_exp=exp,
            max_exp=(2 ** lvl) * 100,
            username=user_name.display_name,
            voice_time=voice_time,
            rank=rank
        )
        image = await a.card_gh()
        await ctx.send(file=disnake.File(image, filename="1.png"))


    @commands.command(aliases = ['lb','–ª–∏–¥–µ—Ä–±–æ—Ä–¥','–õ–ë', '–ª–∏–¥–µ—Ä—ã'])
    async def LB(self, ctx):
        db = await aiosqlite.connect('users.db')
        users = await db.execute_fetchall('SELECT * FROM users ORDER BY lvl DESC, exp DESC LIMIT 15')
        await db.close()
        i=0
        medals = ('ü•á', 'ü•à', 'ü•â', '')
        embed = disnake.Embed(title= f"üëë–¢–û–ü 15:", color = disnake.Colour.red())
        for user in users:
            i+=1
            if i > 3:
                medal = medals[3]
            else:
                medal = medals[i - 1]
            user_nick = self.bot.get_user(user[1])
            embed.add_field(name=f"{medal}#{i} {user_nick.display_name} ", value=f'–£—Ä–æ–≤–µ–Ω—å: {user[3]}‚ö°Ô∏è–û–ø—ã—Ç: {user[2]}', inline=False)

        # embed.add_field(name=f"–ö–∞–º–æ–Ω –Ω–∞—Ä–æ–¥, –≤—ã–π–¥–∏—Ç–µ –Ω–∞ —É–ª–∏—Ü—É (–•—Ä–µ–Ω —Å –Ω–∏–º —á—Ç–æ —Ç–∞–º –¥–æ–∂–¥—å. –í—Å—ë –ª—É—á—à–µ —á–µ–º –≤ –∫–æ–º–ø –∑–∞–ª–∏–ø–∞—Ç—å...)", value=f'', inline=False)
        await ctx.send(embed=embed)

    @commands.command(aliases = ['–¥–∞—Ç—å','+'])
    async def add(self, ctx, member: disnake.Member, exp_add: int = None):
        check = False
        for role in ctx.author.roles:
            if role.id in self.admin_roles_list:
                check = True
        if check or (ctx.author.id == pastYourIdHere):
            if exp_add is None:
                exp_add = 50
            await ctx.send(f"–Æ–∑–µ—Ä—É **{member.display_name}** –¥–æ–±–∞–≤–ª–µ–Ω–æ **{exp_add}** —ç–∫—Å–ø—ã. –•–æ–æ–æ—Ä–æ–æ–æ—à–∏–π —é–∑–µ—Ä....")
            await self.bot.check_level(user_name=member.name, user_id = member.id, add_exp=exp_add)
        else:        
            await ctx.send(f"–°–æ—Ä—è–Ω. –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ. –¢—ã –±–µ—Å–ø—Ä–∞–≤–Ω–æ–µ –Ω–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ. –ú—É—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞....")

    @commands.command(aliases = ['–≤–∑—è—Ç—å','-'])
    async def get(self, ctx, member: disnake.Member, exp_add: int = None):
        check = False
        for role in ctx.author.roles:
            if role.id in self.admin_roles_list:
                check = True
        if check or (ctx.author.id == pastYourIdHere):
            if exp_add is None:
                exp_add = 50
            await ctx.send(f"–£ —é–∑–µ—Ä–∞ üí©**{member.display_name}**üí© –∑–∞–±—Ä–∞–ª–∏ **{exp_add}** —ç–∫—Å–ø—ã. –ß–µ–ª–æ–≤–µ–∫ –Ω–∞–∫–∞–∑–∞–Ω. –ß–µ–ª–æ–≤–µ–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—Ç—Ä–∞–¥–∞—Ç—å ü§ñüñï")
            await self.bot.check_level(user_name=member.name, user_id=member.id, add_exp=-1*exp_add)
        else:        
            await ctx.send(f"–°–æ—Ä—è–Ω. –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ. –¢—ã –±–µ—Å–ø—Ä–∞–≤–Ω–æ–µ –Ω–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ. –ú—É—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞....")


    @add.error
    async def info_error(self, ctx, error):
        if isinstance(error, commands.BadArgument):
            await ctx.send("–ê–¥–º–∏–Ω —Ç—ã –∏–ª–∏ –∫—Ç–æ? –ü—Ä–æ–≤–µ—Ä—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã! –ü–æ–Ω–∞–±–µ—Ä—É—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º ....")

    @rank.error
    async def info_error(self, ctx, error):
        if isinstance(error, commands.BadArgument):
            await ctx.send("–¢—ã –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π? –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..")

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        if isinstance(error, commands.CommandNotFound):
            await ctx.send("–ß–µ–ª–æ–≤–µ—á–∏—à–∫–∞, —Ç—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–º–∞–Ω–¥—É...")

def setup(bot: commands.Bot):
    bot.add_cog(UserCommands(bot))
